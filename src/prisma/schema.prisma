generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int          @id @default(autoincrement())
  profileImage  String
  fullName      String
  username      String       @unique
  email         String       @unique
  passwordHash  String
  bio           String?
  gender        String?
  role          String       @default("USER")
  createdAt     DateTime     @default(now())
  settings      Settings?
  comments      Comment[]
  likes         Like[]
  posts         Post[]
  reports       Report[]
  notifications Notification[]
  follower      Connection[] @relation("follower")
  following     Connection[] @relation("following")
}

model Connection {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int
  pending     Boolean

  @@id([followingId, followerId])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  image     String
  content   String
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  comments  Comment[]
  likes     Like[]
  reports   Report[]
  user      User      @relation(fields: [userId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    String
  status    String   @default("active")
  isEdited  Boolean?
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  reports   Report[]
}

model Settings {
  id                    Int     @id @default(autoincrement())
  theme                 String
  language              String
  detailsPrivacy        String
  connectionsPrivacy    String
  postsPrivacy          String
  userId                Int     @unique
  user                  User    @relation(fields: [userId], references: [id])
}

model Report {
  id        Int      @id @default(autoincrement())
  reason    String
  createdAt DateTime @default(now())
  postId    Int
  userId    Int
  commentId Int?
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  message   String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
} 
