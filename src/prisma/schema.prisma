generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  profileImage  String
  fullName      String
  username      String          @unique
  email         String          @unique
  passwordHash  String
  bio           String?
  gender        String?
  role          String          @default("USER")
  createdAt     DateTime        @default(now())
  settings      Settings?
  comments      Comment[]
  likes         Like[]
  posts         Post[]
  reports       Report[]
  notifications Notification[]
  follower      Connection[]    @relation("follower")
  following     Connection[]    @relation("following")
}

model Connection {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  follower    User      @relation("follower", fields: [followerId], references: [id])
  followerId  String    @db.ObjectId
  following   User      @relation("following", fields: [followingId], references: [id])
  followingId String    @db.ObjectId
  pending     Boolean
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String
  content   String
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  reports   Report[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    String
  status    String   @default("ACTIVE")
  isEdited  Boolean?
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  reports   Report[]
}

model Settings {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  theme                 String
  language              String
  detailsPrivacy        String
  connectionsPrivacy    String
  postsPrivacy          String
  user                  User    @relation(fields: [userId], references: [id])
  userId                String  @db.ObjectId @unique
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  reason    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  message   String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@index([userId])
} 
